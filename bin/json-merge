#!/usr/bin/env node
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2019, Joyent, Inc.
 */

/*
 * This tool takes an list of json files and prints out a merged
 * version of the files with the right-most files on the command line
 * taking precedence.
 *
 * ./json-merge orig.json [newer.json newest.json ... ]
 */

var fs = require('fs');

var merge = (function(){

    var toString = Object.prototype.toString;
    var obj = '[object Object]';

    return function extend(deep /*, obj1, obj2, obj3 */ ) {
        // take first argument, if its not a boolean
        var args = arguments,
            i = deep === true ? 1 : 0,
            key,
            target = args[i];

        for (++i; i < args.length; ++i) {
            for (key in args[i]) {
                if (deep === true &&
                    target[key] &&
                    // if not doing this check you may end in
                    // endless loop if using deep option
                    toString.call(args[i][key]) === obj &&
                    toString.call(target[key]) === obj ) {

                    extend(deep, target[key], args[i][key]);
                } else {
                    target[key] = args[i][key];
                }
            }
        }
        return target;
    };
}());

function get_json_payload(input_files) {
    var merge_params = [true];

    for (var j = 0; j < input_files.length; j++) {
        var file_content = fs.readFileSync(input_files[j], 'utf8');
        var js_obj = JSON.parse(file_content);
        if (js_obj === '') {
            merge_params.push({});
        } else {
            merge_params.push(js_obj);
        }
    }

    var combined_obj = merge.apply(merge, merge_params);
    console.log(JSON.stringify(combined_obj));
}

get_json_payload(process.argv.slice(2, process.argv.length));

